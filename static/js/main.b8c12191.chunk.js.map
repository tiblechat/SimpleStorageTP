{"version":3,"sources":["getWeb3.js","App.js","serviceWorker.js","index.js"],"names":["getWeb3","Promise","resolve","reject","window","addEventListener","a","ethereum","web3","Web3","enable","console","log","provider","providers","HttpProvider","App","state","storageValue","accounts","contract","componentDidMount","eth","getAccounts","net","getId","networkId","deployedNetwork","SimpleStorageContract","networks","instance","Contract","abi","address","setState","runExample","alert","error","methods","get","call","response","set","storage","value","send","from","this","className","id","type","ref","input","required","onClick","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"m/XAqCeA,EAnCC,kBACd,IAAIC,SAAQ,SAACC,EAASC,GAEpBC,OAAOC,iBAAiB,OAAxB,sBAAgC,kCAAAC,EAAA,0DAE1BF,OAAOG,SAFmB,wBAGtBC,EAAO,IAAIC,IAAKL,OAAOG,UAHD,kBAMpBH,OAAOG,SAASG,SANI,OAQ1BR,EAAQM,GARkB,gDAU1BL,EAAO,EAAD,IAVoB,gCAcrBC,OAAOI,MAERA,EAAOJ,OAAOI,KACpBG,QAAQC,IAAI,2BACZV,EAAQM,KAIFK,EAAW,IAAIJ,IAAKK,UAAUC,aAClC,yBAEIP,EAAO,IAAIC,IAAKI,GACtBF,QAAQC,IAAI,gDACZV,EAAQM,IA3BoB,8DCsFrBQ,G,kNApFbC,MAAQ,CAAEC,aAAc,EAAGV,KAAM,KAAMW,SAAU,KAAMC,SAAU,M,EAEjEC,kB,sBAAoB,oCAAAf,EAAA,+EAGGN,IAHH,cAGVQ,EAHU,gBAMOA,EAAKc,IAAIC,cANhB,cAMVJ,EANU,gBASQX,EAAKc,IAAIE,IAAIC,QATrB,OASVC,EATU,OAUVC,EAAkBC,EAAsBC,SAASH,GACjDI,EAAW,IAAItB,EAAKc,IAAIS,SAC5BH,EAAsBI,IACtBL,GAAmBA,EAAgBM,SAKrC,EAAKC,SAAS,CAAE1B,OAAMW,WAAUC,SAAUU,GAAY,EAAKK,YAlB3C,kDAqBhBC,MAAM,0EAGNzB,QAAQ0B,MAAR,MAxBgB,0D,EA4BpBF,W,sBAAa,gCAAA7B,EAAA,+DACoB,EAAKW,MADzB,EACHE,SAAUC,EADP,EACOA,SADP,SAIYA,EAASkB,QAAQC,MAAMC,OAJnC,OAILC,EAJK,OAOX,EAAKP,SAAS,CAAEhB,aAAcuB,IAPnB,2C,EAUbC,I,sBAAM,kCAAApC,EAAA,+DAC2B,EAAKW,MAA5BE,EADJ,EACIA,SAAUC,EADd,EACcA,SACZuB,EAAU,EAAKA,QAAQC,MAFzB,SAKExB,EAASkB,QAAQI,IAAIC,GAASE,KAAK,CAACC,KAAM3B,EAAS,KALrD,OAOJ,EAAKgB,aACL,EAAKQ,QAAQC,MAAQ,EARjB,2C,wEAWI,IAAD,OACP,OAAKG,KAAK9B,MAAMT,KAId,yBAAKwC,UAAU,OACb,2CACA,uEACA,sDACA,sIAIA,+DACmC,2CADnC,eAGA,qDAA2BD,KAAK9B,MAAMC,cACtC,uDACM,yBAAK8B,UAAU,sBACb,2BACEC,GAAG,UACHC,KAAK,SACLC,IAAK,SAACC,GAAY,EAAKT,QAAUS,GACjCJ,UAAU,eACZK,UAAQ,KAEV,4BAAQC,QAAYP,KAAKL,IAAMM,UAAU,mBAAzC,SAxBD,4E,GAtDKO,cCMEC,QACW,cAA7BpD,OAAOqD,SAASC,UAEe,UAA7BtD,OAAOqD,SAASC,UAEhBtD,OAAOqD,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.b8c12191.chunk.js","sourcesContent":["import Web3 from \"web3\";\r\n\r\nconst getWeb3 = () =>\r\n  new Promise((resolve, reject) => {\r\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\r\n    window.addEventListener(\"load\", async () => {\r\n      // Modern dapp browsers...\r\n      if (window.ethereum) {\r\n        const web3 = new Web3(window.ethereum);\r\n        try {\r\n          // Request account access if needed\r\n          await window.ethereum.enable();\r\n          // Acccounts now exposed\r\n          resolve(web3);\r\n        } catch (error) {\r\n          reject(error);\r\n        }\r\n      }\r\n      // Legacy dapp browsers...\r\n      else if (window.web3) {\r\n        // Use Mist/MetaMask's provider.\r\n        const web3 = window.web3;\r\n        console.log(\"Injected web3 detected.\");\r\n        resolve(web3);\r\n      }\r\n      // Fallback to localhost; use dev console port by default...\r\n      else {\r\n        const provider = new Web3.providers.HttpProvider(\r\n          \"http://127.0.0.1:8545\"\r\n        );\r\n        const web3 = new Web3(provider);\r\n        console.log(\"No web3 instance injected, using Local web3.\");\r\n        resolve(web3);\r\n      }\r\n    });\r\n  });\r\n\r\nexport default getWeb3;\r\n","import React, { Component } from \"react\";\r\nimport SimpleStorageContract from \"./contracts/SimpleStorage.json\";\r\nimport getWeb3 from \"./getWeb3\";\r\n\r\nimport \"./App.css\";\r\n\r\nclass App extends Component {\r\n  state = { storageValue: 0, web3: null, accounts: null, contract: null };\r\n\r\n  componentDidMount = async () => {\r\n    try {\r\n      // Get network provider and web3 instance.\r\n      const web3 = await getWeb3();\r\n\r\n      // Use web3 to get the user's accounts.\r\n      const accounts = await web3.eth.getAccounts();\r\n\r\n      // Get the contract instance.\r\n      const networkId = await web3.eth.net.getId();\r\n      const deployedNetwork = SimpleStorageContract.networks[networkId];\r\n      const instance = new web3.eth.Contract(\r\n        SimpleStorageContract.abi,\r\n        deployedNetwork && deployedNetwork.address,\r\n      );\r\n\r\n      // Set web3, accounts, and contract to the state, and then proceed with an\r\n      // example of interacting with the contract's methods.\r\n      this.setState({ web3, accounts, contract: instance }, this.runExample);\r\n    } catch (error) {\r\n      // Catch any errors for any of the above operations.\r\n      alert(\r\n        `Failed to load web3, accounts, or contract. Check console for details.`,\r\n      );\r\n      console.error(error);\r\n    }\r\n  };\r\n\r\n  runExample = async () => {\r\n    const { accounts, contract } = this.state;\r\n\r\n    // Get the value from the contract to prove it worked.\r\n    const response = await contract.methods.get().call();\r\n\r\n    // Update state with the result.\r\n    this.setState({ storageValue: response });\r\n  };\r\n\r\n  set = async() => {\r\n    const { accounts, contract } = this.state;\r\n    const storage = this.storage.value;\r\n    \r\n    // Interaction avec le smart contract pour ajouter un compte \r\n    await contract.methods.set(storage).send({from: accounts[0]});\r\n    // Récupérer la liste des comptes autorisés\r\n    this.runExample();\r\n    this.storage.value = 0;\r\n  }\r\n\r\n  render() {\r\n    if (!this.state.web3) {\r\n      return <div>Loading Web3, accounts, and contract...</div>;\r\n    }\r\n    return (\r\n      <div className=\"App\">\r\n        <h1>Good to Go!</h1>\r\n        <p>Your Truffle Box is installed and ready.</p>\r\n        <h2>Smart Contract Example</h2>\r\n        <p>\r\n          If your contracts compiled and migrated successfully, below will show\r\n          a stored value of 5 (by default).\r\n        </p>\r\n        <p>\r\n          Try changing the value stored on <strong>line 40</strong> of App.js.\r\n        </p>\r\n        <div>The stored value is: {this.state.storageValue}</div>\r\n        <div>Set a new stored value: \r\n              <div className=\"form-group mr-sm-2\">\r\n                <input\r\n                  id=\"storage\"\r\n                  type=\"number\"\r\n                  ref={(input) => { this.storage = input }}\r\n                  className=\"form-control\"\r\n                required />\r\n              </div>  \r\n              <button onClick = { this.set } className=\"btn btn-primary\">Set</button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}